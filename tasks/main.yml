---
# tasks file for role_tomcat

- name: Create tomcat group
  ansible.builtin.group:
    name: "{{ tomcat_group }}"
    state: present

- name: Create tomcat user
  ansible.builtin.user:
    name: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    home: "/home/tomcat"
    shell: /bin/bash
    create_home: true
    state: present

- name: Check current download URL status
  ansible.builtin.uri:
    url: "{{ tomcat_download_current_url }}"
    method: HEAD
    timeout: 10
    return_content: false
    status_code: [200, 404]
  ignore_errors: true
  register: tomcat_current_url_check

- name: Check archive download URL status
  ansible.builtin.uri:
    url: "{{ tomcat_download_archive_url }}"
    method: HEAD
    timeout: 10
    return_content: false
    status_code: [200, 404]
  ignore_errors: true
  register: tomcat_archive_url_check
  when: tomcat_current_url_check.status != 200

- name: Set download url and availability facts
  ansible.builtin.set_fact:
    tomcat_download_url: >-
      {%- if tomcat_current_url_check.status == 200 -%}
        {{ tomcat_download_current_url }}
      {%- elif tomcat_archive_url_check.status == 200 -%}
        {{ tomcat_download_archive_url }}
      {%- else -%}
        ""
      {%- endif -%}
    tomcat_download_available: >-
      {{ tomcat_current_url_check.status == 200 or tomcat_archive_url_check.status == 200 }}

- name: Check If Expected Tomcat Version Is Already Installed
  ansible.builtin.stat:
    path: "{{ tomcat_versioned_dir }}/VERSION"
  register: tomcat_version_file

- name: Get Installed Tomcat Version
  ansible.builtin.slurp:
    src: "{{ tomcat_versioned_dir }}/VERSION"
  register: installed_tomcat_version
  when: tomcat_version_file.stat.exists

- name: Set Installation Required Fact
  ansible.builtin.set_fact:
    tomcat_install_required: "{{ not tomcat_version_file.stat.exists or (installed_tomcat_version['content'] | b64decode | trim) != tomcat_version }}"

- name: Create Tomcat Versioned Directory
  ansible.builtin.file:
    path: "{{ tomcat_versioned_dir }}"
    state: directory
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: 0744
  when:
    - tomcat_download_available | bool
    - tomcat_download_url != ""
    - tomcat_install_required | bool

- name: Download And Extract Tomcat
  ansible.builtin.unarchive:
    src: "{{ tomcat_download_url }}"
    dest: "{{ tomcat_versioned_dir }}"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: 0744
    remote_src: yes
    extra_opts: [--strip-components=1]
  register: tomcat_unarchive
  when:
    - tomcat_download_available | bool
    - tomcat_download_url != ""
    - tomcat_install_required | bool

- name: Create version file
  ansible.builtin.copy:
    content: "{{ tomcat_version }}"
    dest: "{{ tomcat_versioned_dir }}/VERSION"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: 0644
  when: tomcat_install_required | bool

- name: Check If Folder Exists
  ansible.builtin.stat:
    path: "{{ tomcat_versioned_dir }}"
  register: tomcat_versioned_dir_exists

- name: Create/Update Symbolic Link To Active Tomcat Version
  ansible.builtin.file:
    src: "{{ tomcat_versioned_dir }}"
    dest: "{{ tomcat_home_link_dir }}"
    state: link
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    force: yes
  when: tomcat_versioned_dir_exists.stat.exists

- name: Get Default Java Path
  ansible.builtin.stat:
    path: /bin/java
  register: java_file_stats

- name: Set Java Home Path
  ansible.builtin.set_fact:
    default_java_home_path: "{{ java_file_stats.stat.lnk_source | dirname | dirname }}"

- name: Create Tomcat Service File
  ansible.builtin.template:
    src: tomcat.service.j2
    dest: /etc/systemd/system/tomcat.service
    owner: root
    group: root
    mode: 0644

- name: Create Setenv.sh
  ansible.builtin.template:
    src: setenv.sh.j2
    dest: "{{ tomcat_versioned_dir }}/bin/setenv.sh"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: 0644

- name: Create Tomcat Users And Roles
  ansible.builtin.template:
    src: tomcat-users.xml.j2
    dest: "{{ tomcat_versioned_dir }}/conf/tomcat-users.xml"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: 0744

- name: Configure Manager/META-INF/Context.xml
  ansible.builtin.template:
    src: manager.meta.context.xml.j2
    dest: "{{ tomcat_versioned_dir }}/webapps/manager/META-INF/context.xml"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: 0744

- name: Configure Host-Manager/META-INF/Context.xml
  ansible.builtin.template:
    src: host-manager.meta.context.xml.j2
    dest: "{{ tomcat_versioned_dir }}/webapps/host-manager/META-INF/context.xml"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: 0755

- name: Check current ROOT link status
  ansible.builtin.stat:
    path: "{{ tomcat_root_link_path }}"
  register: root_link_stat

- name: Remove Existing ROOT.war If Present
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ tomcat_root_path }}"
    - "{{ tomcat_root_link_path }}"
  loop_control:
    label: "{{ item }}"
  when: not (root_link_stat.stat.islnk | default(false) and root_link_stat.stat.lnk_source | default('') == tomcat_webapp_path)

- name: Create Link For Webapp To ROOT.war
  ansible.builtin.file:
    src: "{{ tomcat_webapp_path }}"
    dest: "{{ tomcat_root_link_path }}"
    state: link
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    follow: false
    force: yes
  notify: restart tomcat
  when: not (root_link_stat.stat.islnk | default(false) and root_link_stat.stat.lnk_source | default('') == tomcat_webapp_path)

- name: Create Tomcat Log Directory
  ansible.builtin.file:
    path: "{{ tomcat_log_dir }}"
    state: directory
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: 0755
  notify: restart tomcat

- name: Check current log link status
  ansible.builtin.stat:
    path: "{{ tomcat_log_link_path }}"
  register: log_link_stat

- name: Remove existing Tomcat logs directory
  ansible.builtin.file:
    path: "{{ tomcat_log_link_path }}"
    state: absent
  when: not (log_link_stat.stat.islnk | default(false) and log_link_stat.stat.lnk_source | default('') == tomcat_log_dir)

- name: Create Log Dir Symbolic Link
  ansible.builtin.file:
    src: "{{ tomcat_log_dir }}"
    dest: "{{ tomcat_log_link_path }}"
    state: link
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    force: yes
  notify: restart tomcat
  when: not (log_link_stat.stat.islnk | default(false) and log_link_stat.stat.lnk_source | default('') == tomcat_log_dir)

- name: Start Tomcat Service
  ansible.builtin.systemd_service:
    state: started
    name: tomcat
    daemon_reload: false
    enabled: true
